def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]
pipeline{
    agent any
    tools {
        maven "maven"
        jdk "myjdk"
    }
    
    stages {
        stage('01-Fetch code') {
            steps {
                git branch: 'master', url: 'https://github.com/bathyz/sampleapplication.git'
            }
        }
        
        stage('02-Clean code') {
            steps {
                sh 'mvn clean'
            }
        }
        stage ('03-Validate Code') {
            steps {
                sh 'mvn validate'
            }
        }
        
        stage ('04 Compile Code') {
            steps {
                sh 'mvn compile'
            }
        }
        stage ('05-Code review') {
            steps {
                sh 'mvn -P metrics pmd:pmd'
            }
        }
        stage ('06-Test Code') {
            steps {
                sh 'mvn test'
            }
        }
        stage ('07-Code Coverage') {
            steps {
                sh 'mvn verify'
            }
        }
        stage ('08-Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }
        stage ('09-Package Code') {
            steps {
                sh 'mvn package'
            }
        }
        
        stage('10-Sonar Analysis') {
            environment {
                scannerHome = tool 'scanner8'
            }
            steps {
               withSonarQubeEnv('sonar8') {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=sampleapp \
                   -Dsonar.projectName=sampleapp \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/devopsdemo/utilities/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }
        
        stage('11-Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        
        stage('12-UploadArtifact'){
            steps{
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: '10.0.2.37:8081',
                  groupId: 'Test',
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                  repository: 'samplerepo',
                  credentialsId: 'nexusid',
                  artifacts: [
                    [artifactId: 'sampleapp',
                     classifier: '',
                     file: 'target/sampleapp.war',
                     type: 'war']
                  ]
                )
            }
        }
        
        stage('13-DeployArtifact-to-Tomcat'){
            steps{
                deploy adapters: [tomcat8(credentialsId: 'tomcatid', path: '', url: 'http://10.0.2.228:8080/')], contextPath: null, war: '**/*.war'
            }
            
        }
        
        stage('14-CreateDockerImage'){
            steps{
                sh 'docker build . -t bathyz/mywebapp:V$BUILD_NUMBER'
            }
        }
        
        stage('15-Deploy-to-DockerHub'){
            steps{
                withCredentials([string(credentialsId: 'dockerpass', variable: 'dockeracctpass')]) {
                // some block
                sh "docker login -u bathyz -p ${dockeracctpass}"
                sh 'docker push bathyz/mywebapp:V$BUILD_NUMBER'
                }
                
            }
        }
        
        stage('16-Create-a-Container'){
            steps{
                sh 'docker run -itd --name mysampleapp -p 88:8080 bathyz/mywebapp:V$BUILD_NUMBER ' 
            }
        }
        
        
        
    }
    post {
        always {
            echo 'Slack Notifications.'
            slackSend channel: '#jenkinsclass',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL} \n call admin on #6674091834"
        }
    }
        


}
